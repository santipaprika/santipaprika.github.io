<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Santi Gonzalez</title>
    <description>My Personal Webpage</description>
    <link>/</link>
    <atom:link href="/sitemap.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 28 Jun 2021 23:06:24 +0200</pubDate>
    <lastBuildDate>Mon, 28 Jun 2021 23:06:24 +0200</lastBuildDate>
    <generator>Jekyll v4.2.0</generator>
    
      <item>
        <title>GPU-based visibility: empirical study</title>
        <description>&lt;p&gt;In this post I am going to study the performance of some GPU-based visibility techniques against traditional ones.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;visibility-techniques-covered&quot;&gt;Visibility techniques covered&lt;/h2&gt;
&lt;hr /&gt;
&lt;h3 id=&quot;cpu-based-viewfrustum-culling-vfc&quot;&gt;CPU-based Viewfrustum Culling (VFC)&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://www.lighthouse3d.com/tutorials/view-frustum-culling/&quot;&gt;&lt;em&gt;VFC&lt;/em&gt;&lt;/a&gt; culls all objects that fall completely outside of the camera
frustum. To compute this efficiently (and conservatively), AABBs are
used to check whether models are inside or outside the camera frustum.&lt;/p&gt;

&lt;h3 id=&quot;stop-and-wait-sw-or-sw&quot;&gt;Stop and Wait (SW or S&amp;amp;W)&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;S&amp;amp;W&lt;/em&gt; uses occlusion queries to determine if an object is visible in
screen, and therefore should be rendered. To perform this, we need to
render in a front-to-back fashion so that front objects already rendered
will occlude back objects, which will not pass the occlusion query test
and consecutively will not be rendered.&lt;br /&gt;
It is important to notice that objects are visited sequentially after
being rendered individually, so that one object will not be queried nor
rendered until the previous one has been rendered (or discarded) after
being queried.&lt;/p&gt;

&lt;h3 id=&quot;coherent-hierarchical-culling-chc&quot;&gt;Coherent Hierarchical Culling (CHC)&lt;/h3&gt;

&lt;p&gt;Approach based on &lt;a href=&quot;https://www.cg.tuwien.ac.at/research/publications/2004/Bittner-2004-CHC/Bittner-2004-CHC-Paper.pdf&quot;&gt;&lt;em&gt;Coherent Hierarchical Culling: Hardware Occlusion
Queries Made Useful&lt;/em&gt;&lt;/a&gt; by &lt;em&gt;Bittner&lt;/em&gt; et al.&lt;br /&gt;
&lt;em&gt;CHC&lt;/em&gt; is a heuristic that tries to reduce waiting times from the &lt;em&gt;S&amp;amp;W&lt;/em&gt;
approach. To do so, it uses scene hierarchies and temporal information.
At first, only the first level of hidden nodes from the previous frame
(of each branch of the scene hierarchy) will be queried. In the current
implementation, this navigation is performed in a &lt;em&gt;depth-first search&lt;/em&gt;
(&lt;em&gt;DFS&lt;/em&gt;) strategy. Visible leaf nodes in the previous frame are queried
in the current frame and rendered without waiting for the queries
results. At iteration the algorithm tries to see if there some query
results available. If the invisible queried nodes turn out to be visible
in this frame, then they are set visible and traversed (i.e. its child
nodes will be queried again, and so on). On the other hand, if a leaf
nodes that was visible in the previous frame turns out to be hidden, we
will have missed because we will have already rendered it. However, we
will implicitly pull up the invisibility if parent nodes were not
visible as well, since at each new frame all nodes are initialized as
hidden after being visited queried. This will fix our miss for the
following frame.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;experiment-set-up&quot;&gt;Experiment set-up&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;A camera path has been recorded and reproduced using the following
configurations:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;No optimization&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Viewfrustum Culling (&lt;em&gt;VFC&lt;/em&gt;)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Stop and Wait (&lt;em&gt;S&amp;amp;W&lt;/em&gt;)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Stop and Wait + Viewfrustum Culling (&lt;em&gt;S&amp;amp;W + VFC&lt;/em&gt;)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Coherent Hierarchical Culling (&lt;em&gt;CHC&lt;/em&gt;)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Coherent Hierarchical Culling + Viewfrustum Culling (&lt;em&gt;CHC + VFC&lt;/em&gt;)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The model used has been &lt;em&gt;moai.ply&lt;/em&gt; in a 24 x 24 grid (key button 6).&lt;br /&gt;
In the current system, this is a significantly saturated configuration in geometry, so real/interactive times are not achieved for some cases, as can be observed in Figure 1. However, this is not relevant, since the goal of this study is to compare the relative costs
of the different techniques, which are effectively displayed.&lt;br /&gt;
The camera path has been designed so that different scenarios appear
(see Table 1).&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;results&quot;&gt;Results&lt;/h2&gt;
&lt;hr /&gt;
&lt;style&gt;
    table{
        border-collapse: collapse;
        border-spacing: 0;
        border:2px solid #000000;
    }

    th{
        border:2px solid #000000;
    }

    td{
        border:1px solid #000000;
    }
&lt;/style&gt;

&lt;table style=&quot;width:95%;&quot;&gt;
&lt;caption&gt;Table 1: Path intervals description and approximate average frame times obtained with no optimization, &lt;em&gt;VFC&lt;/em&gt; and &lt;em&gt;CHC&lt;/em&gt; (most relevant techniques), with sample images belonging to each interval. Best measures for each scenario are highlighted in green.&lt;/caption&gt;
&lt;colgroup&gt;
&lt;col /&gt;
&lt;col style=&quot;width: 30%&quot; /&gt;
&lt;col style=&quot;width: 28%&quot; /&gt;
&lt;col /&gt;
&lt;col /&gt;
&lt;col /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr class=&quot;header&quot;&gt;
&lt;th style=&quot;text-align: center;&quot;&gt;Frame&lt;/th&gt;
&lt;th style=&quot;text-align: left;&quot;&gt;Description&lt;/th&gt;
&lt;th style=&quot;text-align: left;&quot;&gt;Image&lt;/th&gt;
&lt;th style=&quot;text-align: center;&quot;&gt;No OPT&lt;/th&gt;
&lt;th style=&quot;text-align: center;&quot;&gt;VFC&lt;/th&gt;
&lt;th style=&quot;text-align: center;&quot;&gt;CHC&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&quot;odd&quot;&gt;
&lt;td style=&quot;text-align: center;&quot;&gt;0-350&lt;/td&gt;
&lt;td style=&quot;text-align: left;&quot;&gt;Camera close to individual models.&lt;/td&gt;
&lt;td style=&quot;text-align: left;&quot;&gt;&lt;img src=&quot;/static/post-images/gpu-based-visibility/region1.png&quot; alt=&quot;image&quot; /&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: center;&quot;&gt;195 ms&lt;/td&gt;
&lt;td style=&quot;text-align: center;&quot;&gt;160 ms&lt;/td&gt;
&lt;td style=&quot;text-align: center; background-color: #45f542&quot;&gt;40 ms&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;even&quot;&gt;
&lt;td style=&quot;text-align: center;&quot;&gt;350-550&lt;/td&gt;
&lt;td style=&quot;text-align: left;&quot;&gt;Camera frustum containing the whole scene at floor level&lt;/td&gt;
&lt;td style=&quot;text-align: left;&quot;&gt;&lt;img src=&quot;/static/post-images/gpu-based-visibility/region2.png&quot; alt=&quot;image&quot; /&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: center;&quot;&gt;195 ms&lt;/td&gt;
&lt;td style=&quot;text-align: center;&quot;&gt;195 ms&lt;/td&gt;
&lt;td style=&quot;text-align: center; background-color: #45f542&quot;&gt;55 ms&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;odd&quot;&gt;
&lt;td style=&quot;text-align: center;&quot;&gt;550-800&lt;/td&gt;
&lt;td style=&quot;text-align: left;&quot;&gt;Camera seeing the whole scene from above&lt;/td&gt;
&lt;td style=&quot;text-align: left;&quot;&gt;&lt;img src=&quot;/static/post-images/gpu-based-visibility/region3.png&quot; alt=&quot;image&quot; /&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: center; background-color: #45f542&quot;&gt;195 ms&lt;/td&gt;
&lt;td style=&quot;text-align: center; background-color: #45f542&quot;&gt;195 ms&lt;/td&gt;
&lt;td style=&quot;text-align: center;&quot;&gt;370 ms&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;even&quot;&gt;
&lt;td style=&quot;text-align: center;&quot;&gt;800-950&lt;/td&gt;
&lt;td style=&quot;text-align: left;&quot;&gt;Camera navigating below the floor plane&lt;/td&gt;
&lt;td style=&quot;text-align: left;&quot;&gt;&lt;img src=&quot;/static/post-images/gpu-based-visibility/region4.png&quot; alt=&quot;image&quot; /&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: center;&quot;&gt;195 ms&lt;/td&gt;
&lt;td style=&quot;text-align: center;&quot;&gt;120 ms&lt;/td&gt;
&lt;td style=&quot;text-align: center; background-color: #45f542&quot;&gt;5 ms&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;odd&quot;&gt;
&lt;td style=&quot;text-align: center;&quot;&gt;950-1200&lt;/td&gt;
&lt;td style=&quot;text-align: left;&quot;&gt;Camera navigating inside the grid at floor level&lt;/td&gt;
&lt;td style=&quot;text-align: left;&quot;&gt;&lt;img src=&quot;/static/post-images/gpu-based-visibility/region5.png&quot; alt=&quot;image&quot; /&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: center;&quot;&gt;195 ms&lt;/td&gt;
&lt;td style=&quot;text-align: center;&quot;&gt;90 ms&lt;/td&gt;
&lt;td style=&quot;text-align: center; background-color: #45f542&quot;&gt;30 ms&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;even&quot;&gt;
&lt;td style=&quot;text-align: center;&quot;&gt;1200-1600&lt;/td&gt;
&lt;td style=&quot;text-align: left;&quot;&gt;Camera looking at edges and corners of the grid (low amount of objects)&lt;/td&gt;
&lt;td style=&quot;text-align: left;&quot;&gt;&lt;img src=&quot;/static/post-images/gpu-based-visibility/region6.png&quot; alt=&quot;image&quot; /&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: center;&quot;&gt;195 ms&lt;/td&gt;
&lt;td style=&quot;text-align: center; background-color: #45f542&quot;&gt;45 ms&lt;/td&gt;
&lt;td style=&quot;text-align: center;&quot;&gt;70 ms&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;odd&quot;&gt;
&lt;td style=&quot;text-align: center;&quot;&gt;1600-2000&lt;/td&gt;
&lt;td style=&quot;text-align: left;&quot;&gt;Camera seeing most of the scene from above&lt;/td&gt;
&lt;td style=&quot;text-align: left;&quot;&gt;&lt;img src=&quot;/static/post-images/gpu-based-visibility/region7.png&quot; alt=&quot;image&quot; /&gt;&lt;/td&gt;
&lt;td style=&quot;text-align: center;&quot;&gt;195 ms&lt;/td&gt;
&lt;td style=&quot;text-align: center; background-color: #45f542&quot;&gt;170 ms&lt;/td&gt;
&lt;td style=&quot;text-align: center;&quot;&gt;330 ms&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;figure class=&quot;image&quot;&gt;
    &lt;p align=&quot;center&quot;&gt;
        &lt;img src=&quot;/static/projects/gpu_based_visibility_preview.png&quot; alt=&quot;Figure 1: Frame times to compute each frame in the test sequence used, evaluated with the proposed visibility techniques. Dashed lines are used to represent the same techniques as non-dashed ones but with viewfrustum culling (VFC).&quot; width=&quot;80%&quot; /&gt;
    &lt;/p&gt;
    &lt;figcaption&gt;Figure 1: Frame times to compute each frame in the test sequence used, evaluated with the proposed visibility techniques. Dashed lines are used to represent the same techniques as non-dashed ones but with viewfrustum culling (VFC).&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;discussion&quot;&gt;Discussion&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;As can be observed in Table 1 and Figure 1, the use of different visibility techniques can imply a huge change in performance.&lt;/p&gt;

&lt;h3 id=&quot;viewfrustum-culling-vfc&quot;&gt;Viewfrustum Culling (&lt;em&gt;VFC&lt;/em&gt;)&lt;/h3&gt;

&lt;p&gt;The first important difference to notice is the impact of &lt;em&gt;VFC&lt;/em&gt;. Compared to no optimizations, &lt;em&gt;VFC&lt;/em&gt; achieves much better performance in
general, and almost identical performance in the worst cases. Therefore, it is safe to use &lt;em&gt;VFC&lt;/em&gt; in this configuration.&lt;br /&gt;
Worst cases correspond to sequence intervals in which all elements of the grid are contained inside the camera frustum, hence &lt;em&gt;VFC&lt;/em&gt; is not able to reduce the bottleneck.&lt;br /&gt;
Best cases are associated to frames that contain very few geometry in
the camera frustum.&lt;/p&gt;

&lt;h3 id=&quot;stop-and-wait-sw&quot;&gt;Stop and Wait (&lt;em&gt;S&amp;amp;W&lt;/em&gt;)&lt;/h3&gt;

&lt;p&gt;The first occlusion query-based method introduced is &lt;em&gt;S&amp;amp;W&lt;/em&gt;. The technique alone performs worse than using no optimization techniques. As
expected, this is because of the constant stalls in CPU and GPU during the occlusion querying phase.&lt;br /&gt;
With &lt;em&gt;VFC&lt;/em&gt;, the technique seems to perform better, but still worse than only using &lt;em&gt;VFC&lt;/em&gt;.&lt;br /&gt;
We could conclude that it is not worth using &lt;em&gt;S&amp;amp;W&lt;/em&gt; for almost any scenario.&lt;/p&gt;

&lt;h3 id=&quot;coherent-hierarchical-culling-chc-1&quot;&gt;Coherent Hierarchical Culling (&lt;em&gt;CHC&lt;/em&gt;)&lt;/h3&gt;

&lt;p&gt;Finally, lets analyze the &lt;em&gt;CHC&lt;/em&gt; effects on performance. In general, it reduces significantly the frame times with respect to the previous approaches. Looking at Figure 1, we can even see many frames in which the improvement is around one order of magnitude.&lt;br /&gt;
However, it can be observed as well that this technique is not very stable in terms of frame rate. &lt;em&gt;VFC&lt;/em&gt; could seem unstable too, but in all cases it has the same or better performance than no optimization times. This is not the case of &lt;em&gt;CHC&lt;/em&gt;. There are some frames in which the performance is significantly worse than no optimization at all. This scenario appears in frames with no occlusions (or very few of them), because even if all leaf nodes end up being rendered, they will need to be queried as well. Therefore, since a leaf node is equivalent to a model, all the models will be queried, and the frame rendering phase will not end until all queries have finished.&lt;br /&gt;
Also, notice that &lt;em&gt;VFC&lt;/em&gt; has almost no impact when using &lt;em&gt;CHC&lt;/em&gt;. This is because the hierarchical structure of the scene is performing this step implicitly. If an inner node (containing a set of models) does not pass the query test, then it is considered as occluded, but it could be also the case that it has not been projected to the screen, i.e. it is outside the camera frustum.&lt;br /&gt;
Therefore, very few queries are avoided if we use &lt;em&gt;VFC&lt;/em&gt;, to the point that it there is no significant gain in using it (VFC test as expensive as launching the few queries avoided).&lt;br /&gt;
&lt;br /&gt;
Even though current techniques are more involved, the performance of the algorithms covered give a brief idea of the pros and cons of each one. I learned so much working on this, so I hope it has been useful to you too in some way.&lt;br /&gt;
&lt;br /&gt;
See you in the next one!&lt;/p&gt;
</description>
        <pubDate>Sun, 27 Jun 2021 13:50:30 +0200</pubDate>
        <link>/rendering/2021/06/27/GPU-based-visibility-empirical-study/</link>
        <guid isPermaLink="true">/rendering/2021/06/27/GPU-based-visibility-empirical-study/</guid>
        
        
        <category>rendering</category>
        
      </item>
    
      <item>
        <title>Webpage opening</title>
        <description>&lt;p&gt;Hello everyone!
This is an inaguration post for my new webpage, so I am going to discuss how it is structured and which kind of content may appear in the future.&lt;/p&gt;

&lt;h2 id=&quot;structure&quot;&gt;Structure&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Home:&lt;/strong&gt; blog-like landing page, listing the published posts (like this one) sorted by publication date (newest first).&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;About:&lt;/strong&gt; Plain page with academic and not so academic information about myself.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Projects:&lt;/strong&gt; Page listing some of my recent personal and academic projects.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Resume:&lt;/strong&gt; Page showing my current CV (formation, experience, skills…).&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;XML Feed:&lt;/strong&gt; XML feed page.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;content&quot;&gt;Content&lt;/h2&gt;

&lt;h3 id=&quot;posts&quot;&gt;Posts&lt;/h3&gt;
&lt;p&gt;Most post will be dev-oriented articles or reports about computer graphics and game development techniques. Still, I do not discard posting stuff about other topics.
Also, I will use some posts as notice page for every new project I may add, introducing the topic, complexity, etc.&lt;/p&gt;

&lt;h3 id=&quot;projects&quot;&gt;Projects&lt;/h3&gt;
&lt;p&gt;Each project will contain technical information about it, as well as features implemented, complexity, and whether it has been a solo project or a team project.&lt;/p&gt;

&lt;p&gt;Notice that in the projects section, all projects are displayed and can be filtered by tags. Also, while hovering over the image of a project in that page, a small animated preview of it will be displayed, which is useful to get a brief idea of it without having to read the technical details (which I don’t think it is feasible if you want know something about all my projects in a short amount of time).&lt;/p&gt;

&lt;p&gt;That would be all for this brief introduction.
Thank you for your attention, and take care!&lt;/p&gt;
</description>
        <pubDate>Tue, 22 Jun 2021 14:30:00 +0200</pubDate>
        <link>/others/2021/06/22/webpage-opening/</link>
        <guid isPermaLink="true">/others/2021/06/22/webpage-opening/</guid>
        
        
        <category>others</category>
        
      </item>
    
    
      <item>
        <title>Scalable Renderer</title>
        <description>Scalable Renderer</description>
        <link>scalable-renderer</link>
        <pubDate>Tue, 01 Jun 2021 00:00:00 +0200</pubDate>
        
        <category>C++</category>
        
        <category>Graphics</category>
        
        <category>Rendering</category>
        
        <category>Modeling</category>
        
      </item>
    
      <item>
        <title>GPU-Based Visibility: Empirical Study</title>
        <description>GPU-Based Visibility: Empirical Study</description>
        <link>gpu-based-visibility</link>
        <pubDate>Tue, 01 Jun 2021 00:00:00 +0200</pubDate>
        
        <category>C++</category>
        
        <category>OpenGL</category>
        
        <category>Graphics</category>
        
        <category>Rendering</category>
        
        <category>Analysis</category>
        
      </item>
    
      <item>
        <title>Procedural Building Generator</title>
        <description>Procedural Building Generator</description>
        <link>procedural-building-generator</link>
        <pubDate>Tue, 01 Jun 2021 00:00:00 +0200</pubDate>
        
        <category>C++</category>
        
        <category>Graphics</category>
        
        <category>Modeling</category>
        
      </item>
    
      <item>
        <title>Marching Cubes Implementation</title>
        <description>Marching Cubes Implementation</description>
        <link>marching-cubes-implementation</link>
        <pubDate>Sat, 01 May 2021 00:00:00 +0200</pubDate>
        
        <category>C++</category>
        
        <category>Qt</category>
        
        <category>Graphics</category>
        
        <category>Modeling</category>
        
      </item>
    
      <item>
        <title>Catmull-Clark Subdivision Implementation</title>
        <description>Catmull-Clark Subdivision Implementation</description>
        <link>catmull-clark-subdivision-implementation</link>
        <pubDate>Thu, 01 Apr 2021 00:00:00 +0200</pubDate>
        
        <category>Python</category>
        
        <category>Blender</category>
        
        <category>Graphics</category>
        
        <category>Modeling</category>
        
      </item>
    
      <item>
        <title>Real-time Realistic Renderer</title>
        <description>Real-time Realistic Renderer</description>
        <link>real-time-realistic-renderer</link>
        <pubDate>Mon, 01 Jun 2020 00:00:00 +0200</pubDate>
        
        <category>C++</category>
        
        <category>OpenGL</category>
        
        <category>Graphics</category>
        
        <category>Renderer</category>
        
      </item>
    
      <item>
        <title>Session Time (WoW Addon)</title>
        <description>Session Time (WoW Addon)</description>
        <link>session-time-wow-addon</link>
        <pubDate>Sun, 01 Nov 2020 00:00:00 +0100</pubDate>
        
        <category>Addon</category>
        
        <category>Lua</category>
        
      </item>
    
      <item>
        <title>Physically Based Renderer</title>
        <description>Physically Based Renderer</description>
        <link>physically-based-renderer</link>
        <pubDate>Sun, 01 Dec 2019 00:00:00 +0100</pubDate>
        
        <category>C++</category>
        
        <category>OpenGL</category>
        
        <category>Graphics</category>
        
        <category>Renderer</category>
        
      </item>
    
      <item>
        <title>Simple Shooter</title>
        <description>Simple Shooter</description>
        <link>simple-shooter</link>
        <pubDate>Mon, 01 Feb 2021 00:00:00 +0100</pubDate>
        
        <category>Unreal Engine</category>
        
        <category>C++</category>
        
        <category>Game</category>
        
      </item>
    
      <item>
        <title>Volumetric Renderer</title>
        <description>Volumetric Renderer</description>
        <link>volumetric-renderer</link>
        <pubDate>Fri, 01 Nov 2019 00:00:00 +0100</pubDate>
        
        <category>C++</category>
        
        <category>OpenGL</category>
        
        <category>Graphics</category>
        
        <category>Renderer</category>
        
      </item>
    
      <item>
        <title>CPU Ray Tracer</title>
        <description>CPU Ray Tracer</description>
        <link>cpu-ray-tracer</link>
        <pubDate>Sat, 01 Jun 2019 00:00:00 +0200</pubDate>
        
        <category>C++</category>
        
        <category>OpenGL</category>
        
        <category>Graphics</category>
        
        <category>Renderer</category>
        
      </item>
    
      <item>
        <title>Escape Room</title>
        <description>Escape Room</description>
        <link>escape-room</link>
        <pubDate>Sun, 01 Nov 2020 00:00:00 +0100</pubDate>
        
        <category>Unity</category>
        
        <category>C#</category>
        
        <category>VR</category>
        
        <category>Game</category>
        
      </item>
    
      <item>
        <title>Penguin Pet</title>
        <description>Penguin Pet</description>
        <link>penguin-pet</link>
        <pubDate>Fri, 01 Jan 2021 00:00:00 +0100</pubDate>
        
        <category>Unity</category>
        
        <category>C#</category>
        
        <category>AR</category>
        
        <category>Vuforia</category>
        
        <category>Game</category>
        
      </item>
    
      <item>
        <title>Pick &amp; Run</title>
        <description>Pick &amp; Run</description>
        <link>pick-and-run</link>
        <pubDate>Sat, 01 Jun 2019 00:00:00 +0200</pubDate>
        
        <category>C++</category>
        
        <category>OpenGL</category>
        
        <category>Game</category>
        
      </item>
    
      <item>
        <title>Priest Simulator</title>
        <description>Priest Simulator</description>
        <link>priest-simulator</link>
        <pubDate>Mon, 01 Apr 2019 00:00:00 +0200</pubDate>
        
        <category>C++</category>
        
        <category>OpenGL</category>
        
        <category>Game</category>
        
      </item>
    
      <item>
        <title>Endless Runner</title>
        <description>Endless Runner</description>
        <link>endless-runner</link>
        <pubDate>Fri, 01 May 2020 00:00:00 +0200</pubDate>
        
        <category>Unity</category>
        
        <category>C#</category>
        
        <category>Game</category>
        
        <category>Fiverr</category>
        
      </item>
    
      <item>
        <title>Save the Zebra</title>
        <description>Save the Zebra</description>
        <link>save-the-zebra</link>
        <pubDate>Wed, 01 Jul 2020 00:00:00 +0200</pubDate>
        
        <category>Unity</category>
        
        <category>C#</category>
        
        <category>Game</category>
        
        <category>Fiverr</category>
        
      </item>
    
      <item>
        <title>Color War</title>
        <description>Color War</description>
        <link>color-war</link>
        <pubDate>Sat, 01 Aug 2020 00:00:00 +0200</pubDate>
        
        <category>Python</category>
        
        <category>Web</category>
        
        <category>Game</category>
        
        <category>HTML</category>
        
        <category>Django</category>
        
        <category>Javascript</category>
        
        <category>React</category>
        
      </item>
    
  </channel>
</rss>
